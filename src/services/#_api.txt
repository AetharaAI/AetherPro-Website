// src/services/api.js

// Explicit API base URL configuration
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000';

// Debug logging to verify the URL
console.log('API Base URL:', API_BASE_URL);

// Token management
const getAuthToken = () => {
  return localStorage.getItem('authToken');
};

const setAuthToken = (token) => {
  if (token) {
    localStorage.setItem('authToken', token);
  } else {
    localStorage.removeItem('authToken');
  }
};

const clearAuthToken = () => {
  localStorage.removeItem('authToken');
};

async function fetchApi(endpoint, options = {}) {
  // Force absolute URL construction
  const url = `${API_BASE_URL}${endpoint}`;
  console.log('Making request to:', url); // Debug log
  console.log('[fetchApi] calling ->', url);

  const token = getAuthToken();
  
  const defaultHeaders = {
    'Content-Type': 'application/json',
  };

  // Add Authorization header if token exists
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`;
  }

  const config = {
    ...options,
    headers: {
      ...defaultHeaders,
      ...options.headers,
    },
  };

  try {
    const response = await fetch(url, config);
    
    // Handle 401 unauthorized - token might be expired
    if (response.status === 401) {
      clearAuthToken();
      // Optionally redirect to login or dispatch logout action
      if (window.location.pathname !== '/login' && window.location.pathname !== '/signup') {
        window.location.href = '/login';
      }
      throw new Error('Authentication required');
    }

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ detail: response.statusText }));
      console.error(`API Error ${response.status} for ${url}:`, errorData);
      throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
    }

    // Handle cases where response might be empty (e.g., 204 No Content)
    const contentType = response.headers.get("content-type");
    if (contentType && contentType.indexOf("application/json") !== -1) {
      return response.json();
    }
    return response.text();
  } catch (error) {
    console.error(`Network or other error for ${url}:`, error);
    throw error;
  }
}

// --- EXISTING LLM/ORCHESTRATION ENDPOINTS ---
export const submitPrompt = async (promptText, sessionId = null, selectedAgents = null, requestId = null, attachedFiles = []) => {
  const payload = {
    prompt_text: promptText,
  };
  
  if (sessionId) {
    payload.session_id = sessionId;
  }
  
  if (requestId) {
    payload.request_id = requestId;
  }
  
  if (selectedAgents && selectedAgents.length > 0) {
    payload.selected_agents_override = selectedAgents;
  }
  
  if (attachedFiles && attachedFiles.length > 0) {
    payload.attached_files = attachedFiles;
  }
  
  return fetchApi('/api/v1/prompt', {
    method: 'POST',
    body: JSON.stringify(payload),
  });
};

export const getSystemStatus = async () => {
  return fetchApi('/api/v1/system/status');
};

export const getModules = async () => {
  return fetchApi('/api/v1/modules');
};

export const uploadFile = async (file) => {
  const formData = new FormData();
  formData.append('file', file);
  
  return fetchApi('/api/v1/upload-file', {
    method: 'POST',
    body: formData,
    headers: {}, // Let browser set Content-Type for FormData
  });
};

export const parseLogsFile = async (file) => {
  const formData = new FormData();
  formData.append('file', file);
  
  return fetchApi('/api/v1/logs/parse', {
    method: 'POST',
    body: formData,
    headers: {},
  });
};

// --- NEW AUTHENTICATION ENDPOINTS ---
export const signup = async (userData) => {
  console.log('Signup request to:', `${API_BASE_URL}/api/auth/signup`); // Debug log
  
  const response = await fetchApi('/api/auth/signup', {
    method: 'POST',
    body: JSON.stringify(userData),
  });
  
  // Auto-store token after successful signup
  if (response.token) {
    setAuthToken(response.token);
  }
  
  return response;
};

export const login = async (credentials) => {
  console.log('Login request to:', `${API_BASE_URL}/api/auth/login`); // Debug log
  
  const response = await fetchApi('/api/auth/login', {
    method: 'POST',
    body: JSON.stringify(credentials),
  });
  
  // Auto-store token after successful login
  if (response.token) {
    setAuthToken(response.token);
  }
  
  return response;
};

export const logout = async () => {
  clearAuthToken();
  return { success: true };
};

export const getCurrentUser = async () => {
  return fetchApi('/api/auth/me');
};

// --- API KEYS ENDPOINTS ---
export const getApiKeys = async () => {
  return fetchApi('/api/auth/api-keys');
};

export const createApiKey = async (keyData) => {
  return fetchApi('/api/auth/api-keys', {
    method: 'POST',
    body: JSON.stringify(keyData),
  });
};

export const deleteApiKey = async (keyId) => {
  return fetchApi(`/api/auth/api-keys/${keyId}`, {
    method: 'DELETE',
  });
};

// --- DASHBOARD ENDPOINTS ---
export const getDashboardStats = async () => {
  return fetchApi('/api/dashboard/stats');
};

// --- STRIPE ENDPOINTS ---
export const createCheckoutSession = async (priceId, successUrl, cancelUrl) => {
  return fetchApi('/api/stripe/create-checkout-session', {
    method: 'POST',
    body: JSON.stringify({
      priceId,
      successUrl,
      cancelUrl,
    }),
  });
};

export const createBillingPortalSession = async (returnUrl) => {
  return fetchApi('/api/stripe/billing-portal', {
    method: 'POST',
    body: JSON.stringify({
      returnUrl,
    }),
  });
};

// --- WEBSOCKET CONNECTION HELPER ---
export const createWebSocketConnection = (sessionId, onMessage, onError, onClose) => {
  const wsProtocol = API_BASE_URL.startsWith('https') ? 'wss:' : 'ws:';
  const wsHost = API_BASE_URL.replace(/^https?:\/\//, '');
  const wsUrl = `${wsProtocol}//${wsHost}/ws/chat?session_id=${sessionId}`;
  
  console.log('WebSocket connecting to:', wsUrl); // Debug log
  
  const ws = new WebSocket(wsUrl);
  
  ws.onopen = () => {
    console.log('WebSocket connected for session:', sessionId);
  };
  
  ws.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);
      if (onMessage) onMessage(data);
    } catch (error) {
      console.error('Error parsing WebSocket message:', error);
    }
  };
  
  ws.onerror = (error) => {
    console.error('WebSocket error:', error);
    if (onError) onError(error);
  };
  
  ws.onclose = (event) => {
    console.log('WebSocket closed:', event.code, event.reason);
    if (onClose) onClose(event);
  };
  
  return ws;
};

// --- UTILITY FUNCTIONS ---
export const isAuthenticated = () => {
  return !!getAuthToken();
};

export const getStoredToken = () => {
  return getAuthToken();
};

export const setStoredToken = (token) => {
  setAuthToken(token);
};

export const clearStoredToken = () => {
  clearAuthToken();
};

export { getAuthToken, setAuthToken, clearAuthToken };

// --- ERROR HANDLING UTILITIES ---
export const handleApiError = (error) => {
  if (error.message === 'Authentication required') {
    return {
      type: 'auth_error',
      message: 'Please log in to continue',
      shouldRedirect: true
    };
  }
  
  if (error.message.includes('User with this email already exists')) {
    return {
      type: 'validation_error',
      message: 'An account with this email already exists',
      shouldRedirect: false
    };
  }
  
  if (error.message.includes('Invalid email or password')) {
    return {
      type: 'auth_error',
      message: 'Invalid email or password',
      shouldRedirect: false
    };
  }
  
  return {
    type: 'general_error',
    message: error.message || 'An unexpected error occurred',
    shouldRedirect: false
  };
};

// --- DEVELOPMENT/DEBUG HELPERS ---
export const testConnection = async () => {
  try {
    const response = await fetchApi('/health');
    console.log('API connection test successful:', response);
    return response;
  } catch (error) {
    console.error('API connection test failed:', error);
    throw error;
  }
};

// Export all functions
export default {
  submitPrompt,
  getSystemStatus,
  getModules,
  uploadFile,
  parseLogsFile,
  signup,
  login,
  logout,
  getCurrentUser,
  getApiKeys,
  createApiKey,
  deleteApiKey,
  getDashboardStats,
  createCheckoutSession,
  createBillingPortalSession,
  createWebSocketConnection,
  isAuthenticated,
  getStoredToken,
  setStoredToken,
  clearStoredToken,
  handleApiError,
  testConnection,
};